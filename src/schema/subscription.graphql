type Subscription {
  events: Events!
}

interface Event {
  session: String!
  TYPE: String!
}
union Events =
    ConnectEvent
  | ConnectedEvent
  | DisconnectEvent
  | DisconnectedEvent
  | SpotwareMessageEvent
type ConnectEvent implements Event {
  session: String!
  TYPE: String!
  host: String!
  port: Int!
}
type ConnectedEvent implements Event {
  session: String!
  TYPE: String!
  host: String!
  port: Int!
}
type DisconnectEvent implements Event {
  session: String!
  TYPE: String!
}
type DisconnectedEvent implements Event {
  session: String!
  TYPE: String!
}
type SpotwareMessageEvent implements Event {
  session: String!
  TYPE: String!
  payloadType: Int
  clientMsgId: String
}
