type Subscription {
  events: Events!
}
union Events =
    ConnectEvent
  | ConnectedEvent
  | DisconnectEvent
  | DisconnectedEvent
  | SpotwareMessageEvent

interface Event {
  session: String!
}
enum ConnectEventType {
  ConnectEvent
}
type ConnectEvent implements Event {
  session: String!
  type: ConnectEventType!
  host: String!
  port: Int!
}
enum ConnectedEventType {
  ConnectedEvent
}
type ConnectedEvent implements Event {
  session: String!
  type: ConnectedEventType!
  host: String!
  port: Int!
}
enum DisconnectEventType {
  DisconnectEvent
}
type DisconnectEvent implements Event {
  session: String!
  type: DisconnectEventType!
}
enum DisconnectedEventType {
  DisconnectedEvent
}
type DisconnectedEvent implements Event {
  session: String!
  type: DisconnectedEventType!
}
enum SpotwareMessageEventType {
  SpotwareMessageEvent
}
type SpotwareMessageEvent implements Event {
  session: String!
  type: SpotwareMessageEventType!
  payloadType: Int
  payload: Payload
  clientMsgId: String
}
